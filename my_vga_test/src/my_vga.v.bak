`timescale  1ns/1ns

module my_vga
(
    input wire            key_in      ,   //按键输入信号
	 input wire            sys_clk    ,
    input wire            sys_rst_n  ,
    input wire            rx         ,


    output wire  [15:0]   rgb        ,
    output wire           hsync      ,
    output wire           vsync      ,

    //SD卡接口               
    input                 sd_miso     ,  //SD卡SPI串行输入数据信号
    output                sd_clk      ,  //SD卡SPI时钟信号
    output                sd_cs       ,  //SD卡SPI片选信号
    output                sd_mosi     ,  //SD卡SPI串行输出数据信号
    //SDRAM接口
    output                sdram_clk   ,  //SDRAM 时钟
    output                sdram_cke   ,  //SDRAM 时钟有效
    output                sdram_cs_n  ,  //SDRAM 片选
    output                sdram_ras_n ,  //SDRAM 行有效
    output                sdram_cas_n ,  //SDRAM 列有效
    output                sdram_we_n  ,  //SDRAM 写有效
    output       [1:0]    sdram_ba    ,  //SDRAM Bank地址
    output       [1:0]    sdram_dqm   ,  //SDRAM 数据掩码
    output       [12:0]   sdram_addr  ,  //SDRAM 地址
    inout        [15:0]   sdram_data    //SDRAM 数据    

);

//parameter define
parameter  PHOTO_H_PIXEL = 24'd640     ;  //设置SDRAM缓存大小
parameter  PHOTO_V_PIXEL = 24'd480     ;  //设置SDRAM缓存大小

wire            clk_100M        ;  //100mhz时钟,SDRAM操作时钟
wire            clk_100M_shift  ;  //100mhz时钟,SDRAM相位偏移时钟
wire            clk_50M_180deg  ;

wire            clk_50M;
wire            vga_clk;
wire            locked;
wire            rst_n;
wire            po_flag     ;   //串口拼接好的图片数据
wire    [7:0]   po_data     ;   //数据标志信号
wire    [9:0]   pix_x       ;   //VGA有效显示区域X轴坐标
wire    [9:0]   pix_y       ;   //VGA有效显示区域Y轴坐标
wire    [15:0]  pix_data    ;   //VGA像素点色彩信息
wire            key_flag    ;
//wire            catch_valid ;
wire            data_req    ;
wire            catch_finish;
wire            wr_start_en ;
wire    [31:0]  wr_sec_addr ;
wire            sys_init_done   ;  //系统初始化完成
wire            sdram_init_done ;  //SDRAM初始化完成
wire            sd_wr_busy      ;  //读忙信号
wire            wr_req;
wire   [15:0]   rd_data         ;  //sdram_ctrl模块读数据
wire   [15:0]   wr_data         ;  //sdram_ctrl模块写数据
wire            sd_init_done    ;

assign rst_n = (sys_rst_n & locked);
assign  wr_data = pix_data;
assign  sys_init_done = sd_init_done & sdram_init_done;  //SD卡和SDRAM都初始化完成
assign  wr_en = data_req;

//parameter define
parameter   UART_BPS    =   14'd9600        ,   //比特率
            CLK_FREQ    =   26'd50_000_000  ;   //时钟频率


//------------- clk_gen_inst -------------
clk_gen	clk_gen_inst (
	.areset ( ~sys_rst_n      ),
	.inclk0 ( sys_clk         ),
	.c0     ( vga_clk         ),
	.c1     ( clk_50M         ),
	.c2     ( clk_50M_180deg  ),
	.c3     ( clk_100M        ),
	.c4     ( clk_100M_shift  ),
	.locked ( locked          )
	);

//------------- key_filter_inst -------------
key_filter  key_filter_inst(
    .sys_clk     (clk_50M  ),   //输入工作时钟,频率50MHz,1bit
    .sys_rst_n   (rst_n    ),   //输入复位信号,低电平有效,1bit
    .key_in      (key_in   ),
	 
	 .key_flag    (key_flag )
);

	
//-------------uart_rx_inst-------------
uart_rx
#(
    .UART_BPS    (UART_BPS),         //串口波特率
    .CLK_FREQ    (CLK_FREQ)          //时钟频率
)
uart_rx_inst
(
    .sys_clk     (clk_50M  ),   //输入工作时钟,频率50MHz,1bit
    .sys_rst_n   (rst_n    ),   //输入复位信号,低电平有效,1bit
    .rx          (rx       ),   //输入串口的图片数据,1bit

    .po_data     (po_data  ),   //输出拼接好的图片数据
    .po_flag     (po_flag  )    //输出数据标志信号
);

//------------- vga_ctrl_inst -------------
vga_ctrl    vga_ctrl_inst
(
    .sys_clk     (clk_50M    ),  //输入工作时钟,频率25MHz,1bit
	 .vga_clk     (vga_clk    ),  //输入工作时钟,频率25MHz,1bit
    .sys_rst_n   (rst_n      ),  //输入复位信号,低电平有效,1bit
    .pix_data    (pix_data   ),  //输入像素点色彩信息,15bit
    .click       (key_flag   ),
	  
	 .catch_finish(catch_finish),
	 //.catch_valid (catch_valid),
	 .data_req    (data_req   ),
    .pix_x       (pix_x      ),  //输出VGA有效显示区域像素点X轴坐标,10bit
    .pix_y       (pix_y      ),  //输出VGA有效显示区域像素点Y轴坐标,10bit
    .hsync       (hsync      ),  //输出行同步信号,1bit
    .vsync       (vsync      ),  //输出场同步信号,1bit
    .vga_rgb     (rgb        )   //输出像素点色彩信息,16bit
);

//------------- vga_pic_inst -------------
vga_pic     vga_pic_inst
(
    .vga_clk        (vga_clk    ),  //输入工作时钟,频率25MHz,1bit
    .sys_clk        (clk_50M    ),  //输入RAM写时钟,1bit
    .sys_rst_n      (rst_n      ),  //输入复位信号,低电平有效,1bit
    .pi_flag        (po_flag    ),  //输入RAM写使能,1bit
    .pi_data        (po_data    ),  //输入RAM写数据,8bit
    .pix_x          (pix_x      ),  //输入VGA有效显示区域像素点X轴坐标,10bit
    .pix_y          (pix_y      ),  //输入VGA有效显示区域像素点Y轴坐标,10bit

    .pix_data_out   (pix_data   )   //输出像素点色彩信息,8bit

);

//------------- data_ctrl_inst -------------
data_ctrl data_ctrl_inst(
	 .clk              (clk_50M),    
	 .rst_n            (rst_n & sys_init_done),
	 .sd_init_done     (sd_init_done),
	 //sd卡
	 .wr_busy          (sd_wr_busy),
	 .catch_finish     (catch_finish),
	 
	 
	 
	 .wr_start_en      (wr_start_en),
	 .wr_sec_addr      (wr_sec_addr)
);


//SD卡顶层控制模块
sd_ctrl_top u_sd_ctrl_top(
    .clk_ref           (clk_50M),
    .clk_ref_180deg    (clk_50M_180deg),
    .rst_n             (rst_n),
    //SD卡接口
    .sd_miso           (sd_miso),
    .sd_clk            (sd_clk),
    .sd_cs             (sd_cs),
    .sd_mosi           (sd_mosi),
    //用户写SD卡接口
    .wr_start_en       (wr_start_en),               //不需要写入数据,写入接口赋值为0
    .wr_sec_addr       (wr_sec_addr),
    .wr_data           (rd_data),
    .wr_busy           (sd_wr_busy),
    .wr_req            (wr_req),
    //用户读SD卡接口
    .rd_start_en       (1'b0),
    .rd_sec_addr       (32'b0),
    .rd_busy           (),
    .rd_val_en         (),
    .rd_val_data       (),    
    
    .sd_init_done      (sd_init_done)
    );  

	 
//SDRAM 控制器顶层模块,封装成FIFO接口
//SDRAM 控制器地址组成: {bank_addr[1:0],row_addr[12:0],col_addr[8:0]}
sdram_top u_sdram_top(
 .ref_clk      (clk_100M),                   //sdram 控制器参考时钟
 .out_clk      (clk_100M_shift),             //用于输出的相位偏移时钟
 .rst_n        (rst_n),                      //系统复位
                                             
  //用户写端口                                   
 .wr_clk       (vga_clk),                    //写端口FIFO: 写时钟
 .wr_en        (wr_en),                      //写端口FIFO: 写使能
 .wr_data      (wr_data),                    //写端口FIFO: 写数据
 .wr_min_addr  (24'd0),                      //写SDRAM的起始地址
 .wr_max_addr  (PHOTO_H_PIXEL*PHOTO_V_PIXEL),//写SDRAM的结束地址
 .wr_len       (10'd512),                    //写SDRAM时的数据突发长度
 .wr_load      (~rst_n),                     //写端口复位: 复位写地址,清空写FIFO
                                             
  //用户读端口                                  
 .rd_clk       (clk_50M),                    //读端口FIFO: 读时钟
 .rd_en        (wr_req),                      //读端口FIFO: 读使能
 .rd_data      (rd_data),                    //读端口FIFO: 读数据
 .rd_min_addr  (24'd0),                      //读SDRAM的起始地址
 .rd_max_addr  (PHOTO_H_PIXEL*PHOTO_V_PIXEL),//读SDRAM的结束地址
 .rd_len       (10'd512),                    //从SDRAM中读数据时的突发长度
 .rd_load      (~rst_n),                     //读端口复位: 复位读地址,清空读FIFO
                                             
 //用户控制端口                                
 .sdram_read_valid  (1'b1),                  //SDRAM 读使能
 .sdram_pingpang_en (1'b0),                  //SDRAM 乒乓操作使能
 .sdram_init_done (sdram_init_done),         //SDRAM 初始化完成标志
                                             
 //SDRAM 芯片接口                                
 .sdram_clk    (sdram_clk),                  //SDRAM 芯片时钟
 .sdram_cke    (sdram_cke),                  //SDRAM 时钟有效
 .sdram_cs_n   (sdram_cs_n),                 //SDRAM 片选
 .sdram_ras_n  (sdram_ras_n),                //SDRAM 行有效
 .sdram_cas_n  (sdram_cas_n),                //SDRAM 列有效
 .sdram_we_n   (sdram_we_n),                 //SDRAM 写有效
 .sdram_ba     (sdram_ba),                   //SDRAM Bank地址
 .sdram_addr   (sdram_addr),                 //SDRAM 行/列地址
 .sdram_data   (sdram_data),                 //SDRAM 数据
 .sdram_dqm    (sdram_dqm)                   //SDRAM 数据掩码
    
);
	 
	 
	 
endmodule